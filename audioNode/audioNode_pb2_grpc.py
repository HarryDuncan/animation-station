# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import audioNode_pb2 as audioNode__pb2


class AudioNodeServiceStub(object):
    """Track Controler Service
    Plays anc controls audio files - creates audio node for analyzer in PYTHON . 

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.InitializeAudioNode = channel.unary_unary(
                '/audioNode.AudioNodeService/InitializeAudioNode',
                request_serializer=audioNode__pb2.InitializeAudioNodeRequest.SerializeToString,
                response_deserializer=audioNode__pb2.InitializeAudioNodeResponse.FromString,
                )
        self.SendPlaylists = channel.unary_unary(
                '/audioNode.AudioNodeService/SendPlaylists',
                request_serializer=audioNode__pb2.PlaylistRequest.SerializeToString,
                response_deserializer=audioNode__pb2.PlaylistResponse.FromString,
                )
        self.InitializeControls = channel.unary_unary(
                '/audioNode.AudioNodeService/InitializeControls',
                request_serializer=audioNode__pb2.InitControllerRequest.SerializeToString,
                response_deserializer=audioNode__pb2.InitControllerResponse.FromString,
                )
        self.PlayTrack = channel.unary_stream(
                '/audioNode.AudioNodeService/PlayTrack',
                request_serializer=audioNode__pb2.ControlRequest.SerializeToString,
                response_deserializer=audioNode__pb2.StreamResponse.FromString,
                )
        self.PauseTrack = channel.unary_unary(
                '/audioNode.AudioNodeService/PauseTrack',
                request_serializer=audioNode__pb2.ControlRequest.SerializeToString,
                response_deserializer=audioNode__pb2.ServiceResponse.FromString,
                )
        self.Rewind = channel.unary_unary(
                '/audioNode.AudioNodeService/Rewind',
                request_serializer=audioNode__pb2.ControlRequest.SerializeToString,
                response_deserializer=audioNode__pb2.ServiceResponse.FromString,
                )
        self.Forward = channel.unary_unary(
                '/audioNode.AudioNodeService/Forward',
                request_serializer=audioNode__pb2.ControlRequest.SerializeToString,
                response_deserializer=audioNode__pb2.ServiceResponse.FromString,
                )
        self.SetVolume = channel.unary_unary(
                '/audioNode.AudioNodeService/SetVolume',
                request_serializer=audioNode__pb2.VolumeRequest.SerializeToString,
                response_deserializer=audioNode__pb2.ServiceResponse.FromString,
                )
        self.SeekTrack = channel.unary_unary(
                '/audioNode.AudioNodeService/SeekTrack',
                request_serializer=audioNode__pb2.SeekRequest.SerializeToString,
                response_deserializer=audioNode__pb2.ServiceResponse.FromString,
                )


class AudioNodeServiceServicer(object):
    """Track Controler Service
    Plays anc controls audio files - creates audio node for analyzer in PYTHON . 

    """

    def InitializeAudioNode(self, request, context):
        """<------------------- Initialization -------------------------------->
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SendPlaylists(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def InitializeControls(self, request, context):
        """For initialization of the controller 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PlayTrack(self, request, context):
        """<------------------ Audio Control ------------------------------>

        loads a track, and plays it 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PauseTrack(self, request, context):
        """pauses currently loaded track 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Rewind(self, request, context):
        """pauses currently loaded track 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Forward(self, request, context):
        """pauses currently loaded track 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SetVolume(self, request, context):
        """Following RPCS need a specific request message because extra data is passed 

        sets the volume track 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SeekTrack(self, request, context):
        """seeks through the track 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AudioNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'InitializeAudioNode': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeAudioNode,
                    request_deserializer=audioNode__pb2.InitializeAudioNodeRequest.FromString,
                    response_serializer=audioNode__pb2.InitializeAudioNodeResponse.SerializeToString,
            ),
            'SendPlaylists': grpc.unary_unary_rpc_method_handler(
                    servicer.SendPlaylists,
                    request_deserializer=audioNode__pb2.PlaylistRequest.FromString,
                    response_serializer=audioNode__pb2.PlaylistResponse.SerializeToString,
            ),
            'InitializeControls': grpc.unary_unary_rpc_method_handler(
                    servicer.InitializeControls,
                    request_deserializer=audioNode__pb2.InitControllerRequest.FromString,
                    response_serializer=audioNode__pb2.InitControllerResponse.SerializeToString,
            ),
            'PlayTrack': grpc.unary_stream_rpc_method_handler(
                    servicer.PlayTrack,
                    request_deserializer=audioNode__pb2.ControlRequest.FromString,
                    response_serializer=audioNode__pb2.StreamResponse.SerializeToString,
            ),
            'PauseTrack': grpc.unary_unary_rpc_method_handler(
                    servicer.PauseTrack,
                    request_deserializer=audioNode__pb2.ControlRequest.FromString,
                    response_serializer=audioNode__pb2.ServiceResponse.SerializeToString,
            ),
            'Rewind': grpc.unary_unary_rpc_method_handler(
                    servicer.Rewind,
                    request_deserializer=audioNode__pb2.ControlRequest.FromString,
                    response_serializer=audioNode__pb2.ServiceResponse.SerializeToString,
            ),
            'Forward': grpc.unary_unary_rpc_method_handler(
                    servicer.Forward,
                    request_deserializer=audioNode__pb2.ControlRequest.FromString,
                    response_serializer=audioNode__pb2.ServiceResponse.SerializeToString,
            ),
            'SetVolume': grpc.unary_unary_rpc_method_handler(
                    servicer.SetVolume,
                    request_deserializer=audioNode__pb2.VolumeRequest.FromString,
                    response_serializer=audioNode__pb2.ServiceResponse.SerializeToString,
            ),
            'SeekTrack': grpc.unary_unary_rpc_method_handler(
                    servicer.SeekTrack,
                    request_deserializer=audioNode__pb2.SeekRequest.FromString,
                    response_serializer=audioNode__pb2.ServiceResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'audioNode.AudioNodeService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AudioNodeService(object):
    """Track Controler Service
    Plays anc controls audio files - creates audio node for analyzer in PYTHON . 

    """

    @staticmethod
    def InitializeAudioNode(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/audioNode.AudioNodeService/InitializeAudioNode',
            audioNode__pb2.InitializeAudioNodeRequest.SerializeToString,
            audioNode__pb2.InitializeAudioNodeResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SendPlaylists(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/audioNode.AudioNodeService/SendPlaylists',
            audioNode__pb2.PlaylistRequest.SerializeToString,
            audioNode__pb2.PlaylistResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def InitializeControls(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/audioNode.AudioNodeService/InitializeControls',
            audioNode__pb2.InitControllerRequest.SerializeToString,
            audioNode__pb2.InitControllerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PlayTrack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/audioNode.AudioNodeService/PlayTrack',
            audioNode__pb2.ControlRequest.SerializeToString,
            audioNode__pb2.StreamResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PauseTrack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/audioNode.AudioNodeService/PauseTrack',
            audioNode__pb2.ControlRequest.SerializeToString,
            audioNode__pb2.ServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Rewind(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/audioNode.AudioNodeService/Rewind',
            audioNode__pb2.ControlRequest.SerializeToString,
            audioNode__pb2.ServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Forward(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/audioNode.AudioNodeService/Forward',
            audioNode__pb2.ControlRequest.SerializeToString,
            audioNode__pb2.ServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SetVolume(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/audioNode.AudioNodeService/SetVolume',
            audioNode__pb2.VolumeRequest.SerializeToString,
            audioNode__pb2.ServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SeekTrack(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/audioNode.AudioNodeService/SeekTrack',
            audioNode__pb2.SeekRequest.SerializeToString,
            audioNode__pb2.ServiceResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
